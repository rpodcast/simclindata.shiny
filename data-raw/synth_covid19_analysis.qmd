---
title: "Synthea COVID-19 Module Analysis"
subtitle: "Replicationg an Jupyter Notebook with Quarto"
format: html
---

# Introduction

This document is a replication of a Jupyter [notebook](https://github.com/synthetichealth/module-validation/blob/c19-updates/notebooks/Synthea%20COVID-19%20Analysis.ipynb) and supporting Python [analysis script](https://github.com/synthetichealth/module-validation/blob/c19-updates/notebooks/analysis.py) using data generated by the [Synthea](https://synthetichealth.github.io/synthea/) COVID-19 module. 

# Requirements

## Data

Download the specialized COVID-19 100K data bundle from the [SyntheticMass](https://synthea.mitre.org/downloads) portal and extract to a local directory on your system. Next, create a project-specific `.Renviron` file in the same directory as the clone of this repository and add the full path to the directory with the unpacked CSV files. Here is an example:

```
synthea_covid19_dir="/path/to/synthea_covid_data"
```

# Analysis

Load packages necessary for the analysis. Each of these packages can be installed from CRAN.
```{r}
#| label: setup
library(dplyr)
library(arrow)
library(tidyr)
library(ggplot2)
```

Import the CSV files using the [`{arrow}`](https://arrow.apache.org/docs/r/) package as most of these contain a large number of rows.

```{r}
#| label: import-data

data_dir <- Sys.getenv("synthea_covid19_dir")

conditions_df <- read_csv_arrow(file.path(data_dir, "conditions.csv"))
patients_df <- read_csv_arrow(file.path(data_dir, "patients.csv"))
observations_df <- read_csv_arrow(file.path(data_dir, "observations.csv"))
careplans_df <- read_csv_arrow(file.path(data_dir, "careplans.csv"))
encounters_df <- read_csv_arrow(file.path(data_dir, "encounters.csv"))
devices_df <- read_csv_arrow(file.path(data_dir, "devices.csv"))
supplies_df <- read_csv_arrow(file.path(data_dir, "supplies.csv"))
procedures_df <- read_csv_arrow(file.path(data_dir, "procedures.csv"))
medications_df <- read_csv_arrow(file.path(data_dir, "medications.csv"))
organizations_df <- read_csv_arrow(file.path(data_dir, "organizations.csv"))
immunizations_df <- read_csv_arrow(file.path(data_dir, "immunizations.csv"))
payers_df <- read_csv_arrow(file.path(data_dir, "payers.csv"))
allergies_df <- read_csv_arrow(file.path(data_dir, "allergies.csv"))
```

# Grab all unique medications and their codes for the app

* Hydroxycholorquine: 979092
* chloroquine phosphate 500 MG Oral Tablet: 1116758
* CD24Fc 480 MG IV: 999999
* remdesivir 100 MG Injection: 2284960
* Leronlimab 700 MG Injection: 999998
* baricitinib 2 MG Oral Tablet: 2047241
* 0.67 ML anakinra 149 MG/ML Prefilled Syringe: 727711
* Lenzilumab 200 MG IV: 999999
* CM4620 Injectable Emulsion: 999999
* Aviptadil Infusion: 999999


```{r}
#| label: unique-meds

all_meds <- medications_df %>%
  select(CODE, DESCRIPTION) %>%
  distinct() %>%
  arrange(DESCRIPTION) %>%
  collect()
```


Grab the IDs of patients that have been diagnosed with COVID-19

```{r}
#| label: patients-diag-cv19

covid_patient_ids <- conditions_df %>%
  filter(CODE == 840539006) %>%
  distinct(PATIENT) %>%
  pull()
```

This grabs every patient with a negative SARS-CoV-2 test. This will include patients who tested negative up front as well as patients that tested negative after leaving the hospital


```{r}
#| label: patients-neg-c19-test

negative_covid_patient_ids <- observations_df %>%
  filter(CODE == '94531-1') %>%
  filter(VALUE == 'Not detected (qualifier value)') %>%
  distinct(PATIENT) %>%
  pull()
```

Grabs IDs for all patients that died in the simulation. This will be more than just COVID-19 deaths.

```{r}
#| label: patient-death

deceased_patients <- patients_df %>%
  filter(!is.na(DEATHDATE)) %>%
  pull(Id)
```

Grabs IDs for patients that have completed the care plan for isolation at home.

```{r}
#| label: pats-complete-isolation

completed_isolation_patients <- careplans_df %>%
  filter(CODE == 736376001) %>%
  filter(!is.na(STOP)) %>%
  filter(REASONCODE == 840539006) %>%
  distinct(PATIENT) %>%
  pull()
```

Survivors are the union of those who have completed isolation at home or have a negative SARS-CoV-2 test.


```{r}
#| label: survivors-c19

#survivor_ids = np.union1d(completed_isolation_patients, negative_covid_patient_ids)
survivor_ids <- union(completed_isolation_patients, negative_covid_patient_ids)
```

Grab IDs for patients with admission due to COVID-19

```{r}
#| label: patients-admission-c19

#inpatient_ids = encounters[(encounters.REASONCODE == 840539006) & (encounters.CODE == 1505002)].PATIENT
inpatient_ids <- encounters_df %>%
  filter(REASONCODE == 840539006) %>%
  filter(CODE == 1505002) %>%
  distinct(PATIENT) %>%
  pull()
```

The number of inpatient survivors

```{r}
#| label: inpatient-survivors

#np.intersect1d(inpatient_ids, survivor_ids).shape
length(intersect(inpatient_ids, survivor_ids))
```

The number of inpatient non-survivors


```{r}
#| label: inpatient-nonsurvivors

#np.intersect1d(inpatient_ids, deceased_patients).shape
length(intersect(inpatient_ids, deceased_patients))
```

The number of patients admitted wtih COVID-19

```{r}
#| label: number-inpatient
length(inpatient_ids)
```

## Health outcomes experienced by COVID-19 patients

The following table shows different health outcomes that were experienced by COVID-19 patients during the course of the disease. The table shows outcomes for individuals who had COVID-19 during an inpatient encounter.

The table columns are defined as follows:

* **Outcome** - A health outcome experienced by an individual during an inpatient encounter
* **Total** - The total number of patients with an inpatient encounter during which they had COVID-19 and the given health outcome
* **Percent of Inpatient** - The total number of patients with an inpatient encounter during which they had COVID-19 and the given health outcome, divided by the total number of patients with an inpatient encounter with COVID-19
* **Survivor** - The total number of patients with an inpatient encounter during which they had COVID-19 and the given health outcome and survived
* **Percent Survivors** - The total number of patients with an inpatient encounter during which they had COVID-19 and the given health outcome and survived, divided by the total number of patients with an inpatient encounter with COVID-19 who also survived
* **Non-Survivor** - The total number of patients with an inpatient encounter during which they had COVID-19 and the given health outcome and did not survive
* **Percent Non-Survivors** - The total number of patients with an inpatient encounter during which they had COVID-19 and the given health outcome and did not survive, divided by the total number of patients with an inpatient encounter with COVID-19 who also did not survive


```{r}
#| label: table-health-outcomes


```

## Lab values for COVID-19 Patients

The following code presents lab values taken for COVID-19 patients. Values are separated into survivors and non survivors.

The first block of code selects lab values of interest from all observations in the simulation.

```{r}
#| label: filter-labs

lab_obs <- observations_df %>%
  filter(CODE %in% c('48065-7', '26881-3', '2276-4', '89579-7', '2532-0', '731-0', '14804-9'))
```

Select COVID-19 conditions out of all conditions in the simulation

```{r}
#| label: c19-conditions

covid_conditions <- conditions_df %>%
  filter(CODE == 840539006)
```

Merge the COVID-19 conditions with the patients

```{r}
#| label: pats-cond-merge

# covid_patients = covid_conditions.merge(patients, how='left', left_on='PATIENT', right_on='Id')
covid_patients <- left_join(covid_conditions, patients_df, by = c("PATIENT" = "Id"))
```

Add an attribute to the DataFrame indicating whether this is a survivor or not.


```{r}
#| label: survivor-attribute

#covid_patients['survivor'] = covid_patients.PATIENT.isin(survivor_ids)
covid_patients <- covid_patients %>%
  mutate(survivor = (PATIENT %in% survivor_ids))
```

Reduce the columns on the DataFrame to ones needed

```{r}
#| label: covid-select

covid_patients <- covid_patients %>%
  select(START, PATIENT, survivor, CODE)
```

Calculate attributes needed to support the plot. Also coerce all lab values into a numeric data type.

```{r}
#| label: derive-attributes

covid_patients_obs <- covid_patients %>%
  left_join(lab_obs, by = "PATIENT") %>%
  filter(!is.na(CODE.y)) %>%
  mutate(lab_days = DATE - START) %>%
  mutate(lab_days2 = as.integer(lab_days)) %>%
  mutate(VALUE = as.numeric(VALUE)) %>%
  mutate(loinc_to_display = case_when( 
    CODE.y == '48065-7' ~ 'D-dimer',
    CODE.y == '2276-4'  ~ 'Serum Ferritin',
    CODE.y == '89579-7' ~ 'High Sensitivity Cardiac Troponin I',
    CODE.y == '26881-3' ~ 'IL-6',
    CODE.y == '731-0'   ~ 'Lymphocytes',
    CODE.y == '14804-9' ~ 'Lactate dehydrogenase',
    TRUE      ~ 'Unknown'
  ))
  
```

Create plots of lab values

First experiment with a single labl value before doing the facet version

```{r}
#| label: lab-single-plot
#| eval: false

df <- covid_patients_obs %>%
  filter(loinc_to_display == "Lymphocytes") %>%
  #filter(survivor) %>%
  select(PATIENT, survivor, lab_days2, START, DATE, loinc_to_display, VALUE, UNITS)

ggplot(df, aes(x = factor(lab_days2), y = VALUE)) +
  geom_boxplot(aes(color = survivor))
  
```

```{r}
#| label: lab-boxplots
#| eval: false
catplt <- ggplot(data = covid_patients_obs, aes(x = as.factor(lab_days2), y = VALUE)) +
  geom_boxplot(aes(color = survivor)) +
  facet_wrap( ~ loinc_to_display, ncol = 2, scales = "free")

catplt
```

```{r}
#| label: line-single-plot
#| eval: false

df <- covid_patients_obs %>%
  filter(loinc_to_display == "Lymphocytes") %>%
  #filter(survivor) %>%
  select(PATIENT, survivor, lab_days2, START, DATE, loinc_to_display, VALUE, UNITS)

ggplot(df, aes(x = as.factor(lab_days2), y = VALUE, color = survivor, group = survivor)) +
  geom_line()
  
```

```{r}
#| label: lab-lineplots
#| eval: false
lineplot <- ggplot(data = covid_patients_obs, aes(x = lab_days2, y = VALUE, color = survivor, group = survivor)) +
  geom_line() +
  facet_wrap( ~ loinc_to_display, ncol = 2, scales = "free")

lineplot
```
